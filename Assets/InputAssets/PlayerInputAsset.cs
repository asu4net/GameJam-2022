//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/InputAssets/PlayerInputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputAsset : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputAsset()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputAsset"",
    ""maps"": [
        {
            ""name"": ""level"",
            ""id"": ""1e386ca4-e32b-40f8-a3ba-75b278b52d41"",
            ""actions"": [
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""a117ff17-83cd-4d91-b7cb-40a9066b56b1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""run"",
                    ""type"": ""Value"",
                    ""id"": ""e869ef1d-f257-4281-b932-c2bb8d25373d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""melee_attack"",
                    ""type"": ""Button"",
                    ""id"": ""62eed8bb-a56e-435e-ac81-6f752d6d6281"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""attack_direction"",
                    ""type"": ""Value"",
                    ""id"": ""e7bb7901-36ea-41d6-890a-b28b1bb7a024"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""shoot_platform"",
                    ""type"": ""Button"",
                    ""id"": ""0f76aedd-bab4-4e73-82d5-72382af74ac7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f05a176-c4e2-4c8e-970b-3656ddd7ebd1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7979a0f3-aab7-4558-ace0-e9d6cf955d72"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""AD"",
                    ""id"": ""ad10d072-1b9d-4275-ba41-31a2941567f3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""9dea84cc-e967-4bd7-935c-d49d7bde37e2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6ff53133-afd5-4d48-a708-d96194041a8f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LJoystick"",
                    ""id"": ""ad2a4e77-c22c-4bfd-a9e7-c9fbe94a212c"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""run"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4580c7f2-7d1e-401c-90ab-47ac31f0dd4d"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""4922f091-7e71-4a71-a84c-05fef9c3c58c"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4584ae39-6006-4103-b16a-737b6f6458e2"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""melee_attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""02d3a7bc-33cc-49c0-a59f-a09df4c760cc"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""melee_attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""LJoystick"",
                    ""id"": ""0169b273-cd41-4f2e-a9db-4d9669f19cba"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""attack_direction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""202a605d-d25f-4d75-8ac0-95e10b117e20"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""attack_direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ff9d7adf-e8e1-47aa-a120-13ea579a2922"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""attack_direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ead1f32d-933a-4ea1-8fb6-df819a281b8c"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""attack_direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1e89d3a3-fbf1-4673-ad8c-05bdf3171440"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""attack_direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""7ca96366-4140-46a9-9d90-338acbe3f3a8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""attack_direction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""416577cc-df40-4081-966f-1563cc6525e2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""attack_direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d4b9739c-abbb-4a80-8aaf-1be336a8f985"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""attack_direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9c724e33-4286-4fad-babf-2d2313167396"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""attack_direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d08fcfb9-6c16-476a-b833-ddc312907b62"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""attack_direction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c087cd6f-91a8-438a-9d7e-6d9f9a1fb1cb"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""shoot_platform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ba7bafd3-7432-4821-b5ba-023625845de4"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""shoot_platform"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""debug"",
            ""id"": ""88f05485-9a1f-4377-b415-0c56111cdf38"",
            ""actions"": [
                {
                    ""name"": ""RecordPath"",
                    ""type"": ""Button"",
                    ""id"": ""3f4c2612-2777-4619-963d-9e759b72ee97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClearPath"",
                    ""type"": ""Button"",
                    ""id"": ""e135ad68-eb2d-4e90-b8e6-a52fef65a88c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c5ba23c4-095e-437e-9f35-4ffa283c59d9"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""RecordPath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""745c4205-4011-4f38-a9a6-3d8104be169e"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""RecordPath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9590cb56-d2ea-4836-8d32-5586a9fbd2a3"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""controller"",
                    ""action"": ""ClearPath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc6151c5-3766-4e9a-a4b7-0758f78b2b6c"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""keyboard"",
                    ""action"": ""ClearPath"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyboard"",
            ""bindingGroup"": ""keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""controller"",
            ""bindingGroup"": ""controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // level
        m_level = asset.FindActionMap("level", throwIfNotFound: true);
        m_level_jump = m_level.FindAction("jump", throwIfNotFound: true);
        m_level_run = m_level.FindAction("run", throwIfNotFound: true);
        m_level_melee_attack = m_level.FindAction("melee_attack", throwIfNotFound: true);
        m_level_attack_direction = m_level.FindAction("attack_direction", throwIfNotFound: true);
        m_level_shoot_platform = m_level.FindAction("shoot_platform", throwIfNotFound: true);
        // debug
        m_debug = asset.FindActionMap("debug", throwIfNotFound: true);
        m_debug_RecordPath = m_debug.FindAction("RecordPath", throwIfNotFound: true);
        m_debug_ClearPath = m_debug.FindAction("ClearPath", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // level
    private readonly InputActionMap m_level;
    private ILevelActions m_LevelActionsCallbackInterface;
    private readonly InputAction m_level_jump;
    private readonly InputAction m_level_run;
    private readonly InputAction m_level_melee_attack;
    private readonly InputAction m_level_attack_direction;
    private readonly InputAction m_level_shoot_platform;
    public struct LevelActions
    {
        private @PlayerInputAsset m_Wrapper;
        public LevelActions(@PlayerInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @jump => m_Wrapper.m_level_jump;
        public InputAction @run => m_Wrapper.m_level_run;
        public InputAction @melee_attack => m_Wrapper.m_level_melee_attack;
        public InputAction @attack_direction => m_Wrapper.m_level_attack_direction;
        public InputAction @shoot_platform => m_Wrapper.m_level_shoot_platform;
        public InputActionMap Get() { return m_Wrapper.m_level; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(LevelActions set) { return set.Get(); }
        public void SetCallbacks(ILevelActions instance)
        {
            if (m_Wrapper.m_LevelActionsCallbackInterface != null)
            {
                @jump.started -= m_Wrapper.m_LevelActionsCallbackInterface.OnJump;
                @jump.performed -= m_Wrapper.m_LevelActionsCallbackInterface.OnJump;
                @jump.canceled -= m_Wrapper.m_LevelActionsCallbackInterface.OnJump;
                @run.started -= m_Wrapper.m_LevelActionsCallbackInterface.OnRun;
                @run.performed -= m_Wrapper.m_LevelActionsCallbackInterface.OnRun;
                @run.canceled -= m_Wrapper.m_LevelActionsCallbackInterface.OnRun;
                @melee_attack.started -= m_Wrapper.m_LevelActionsCallbackInterface.OnMelee_attack;
                @melee_attack.performed -= m_Wrapper.m_LevelActionsCallbackInterface.OnMelee_attack;
                @melee_attack.canceled -= m_Wrapper.m_LevelActionsCallbackInterface.OnMelee_attack;
                @attack_direction.started -= m_Wrapper.m_LevelActionsCallbackInterface.OnAttack_direction;
                @attack_direction.performed -= m_Wrapper.m_LevelActionsCallbackInterface.OnAttack_direction;
                @attack_direction.canceled -= m_Wrapper.m_LevelActionsCallbackInterface.OnAttack_direction;
                @shoot_platform.started -= m_Wrapper.m_LevelActionsCallbackInterface.OnShoot_platform;
                @shoot_platform.performed -= m_Wrapper.m_LevelActionsCallbackInterface.OnShoot_platform;
                @shoot_platform.canceled -= m_Wrapper.m_LevelActionsCallbackInterface.OnShoot_platform;
            }
            m_Wrapper.m_LevelActionsCallbackInterface = instance;
            if (instance != null)
            {
                @jump.started += instance.OnJump;
                @jump.performed += instance.OnJump;
                @jump.canceled += instance.OnJump;
                @run.started += instance.OnRun;
                @run.performed += instance.OnRun;
                @run.canceled += instance.OnRun;
                @melee_attack.started += instance.OnMelee_attack;
                @melee_attack.performed += instance.OnMelee_attack;
                @melee_attack.canceled += instance.OnMelee_attack;
                @attack_direction.started += instance.OnAttack_direction;
                @attack_direction.performed += instance.OnAttack_direction;
                @attack_direction.canceled += instance.OnAttack_direction;
                @shoot_platform.started += instance.OnShoot_platform;
                @shoot_platform.performed += instance.OnShoot_platform;
                @shoot_platform.canceled += instance.OnShoot_platform;
            }
        }
    }
    public LevelActions @level => new LevelActions(this);

    // debug
    private readonly InputActionMap m_debug;
    private IDebugActions m_DebugActionsCallbackInterface;
    private readonly InputAction m_debug_RecordPath;
    private readonly InputAction m_debug_ClearPath;
    public struct DebugActions
    {
        private @PlayerInputAsset m_Wrapper;
        public DebugActions(@PlayerInputAsset wrapper) { m_Wrapper = wrapper; }
        public InputAction @RecordPath => m_Wrapper.m_debug_RecordPath;
        public InputAction @ClearPath => m_Wrapper.m_debug_ClearPath;
        public InputActionMap Get() { return m_Wrapper.m_debug; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DebugActions set) { return set.Get(); }
        public void SetCallbacks(IDebugActions instance)
        {
            if (m_Wrapper.m_DebugActionsCallbackInterface != null)
            {
                @RecordPath.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnRecordPath;
                @RecordPath.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnRecordPath;
                @RecordPath.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnRecordPath;
                @ClearPath.started -= m_Wrapper.m_DebugActionsCallbackInterface.OnClearPath;
                @ClearPath.performed -= m_Wrapper.m_DebugActionsCallbackInterface.OnClearPath;
                @ClearPath.canceled -= m_Wrapper.m_DebugActionsCallbackInterface.OnClearPath;
            }
            m_Wrapper.m_DebugActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RecordPath.started += instance.OnRecordPath;
                @RecordPath.performed += instance.OnRecordPath;
                @RecordPath.canceled += instance.OnRecordPath;
                @ClearPath.started += instance.OnClearPath;
                @ClearPath.performed += instance.OnClearPath;
                @ClearPath.canceled += instance.OnClearPath;
            }
        }
    }
    public DebugActions @debug => new DebugActions(this);
    private int m_keyboardSchemeIndex = -1;
    public InputControlScheme keyboardScheme
    {
        get
        {
            if (m_keyboardSchemeIndex == -1) m_keyboardSchemeIndex = asset.FindControlSchemeIndex("keyboard");
            return asset.controlSchemes[m_keyboardSchemeIndex];
        }
    }
    private int m_controllerSchemeIndex = -1;
    public InputControlScheme controllerScheme
    {
        get
        {
            if (m_controllerSchemeIndex == -1) m_controllerSchemeIndex = asset.FindControlSchemeIndex("controller");
            return asset.controlSchemes[m_controllerSchemeIndex];
        }
    }
    public interface ILevelActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnMelee_attack(InputAction.CallbackContext context);
        void OnAttack_direction(InputAction.CallbackContext context);
        void OnShoot_platform(InputAction.CallbackContext context);
    }
    public interface IDebugActions
    {
        void OnRecordPath(InputAction.CallbackContext context);
        void OnClearPath(InputAction.CallbackContext context);
    }
}
